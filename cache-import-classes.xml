<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2.2 (Build 865U)" ts="2019-08-06 13:28:09">
<Class name="%Zcas.Redirect">
<Super>%RegisteredObject</Super>
<TimeChanged>64547,57050.749301</TimeChanged>
<TimeCreated>64461,82515.693398</TimeCreated>

<Method name="run">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[className:%String,method:%String,&sts,arguments...]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s io=$io
	s mnemonic=##class(%Device).GetMnemonicRoutine()
	s %Stream=##class(%Stream.TmpCharacter).%New()
	u io::("^"_$zname)
	s redirect=##class(%Library.Device).ReDirectIO(1)
	
	i (sts=1) {
		s sts=$CLASSMETHOD(className, method, arguments...)
	} else {
		d $CLASSMETHOD(className, method, arguments...)
	}
	
	i (mnemonic'="") {
		u io::("^"_mnemonic)
	} else {
		u io
	}
	d ##class(%Library.Device).ReDirectIO(redirect)
	
	d %Stream.Rewind()
	
	s result=""
	d {
		s dat=%Stream.Read(.len) q:len<0
		s result=result_dat
	} while(len>0)
	
	q result
]]></Implementation>
</Method>

<Method name="runObj">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[obj:%ObjectHandle,method:%String,&sts,arguments...]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s io=$io
	s mnemonic=##class(%Device).GetMnemonicRoutine()
	s %Stream=##class(%Stream.TmpCharacter).%New()
	u io::("^"_$zname)
	s redirect=##class(%Library.Device).ReDirectIO(1)
	
	i (sts=1) {
		s sts=$METHOD(obj, method, arguments...)
	} else {
		d $METHOD(obj, method, arguments...)
	}
	
	i (mnemonic'="") {
		u io::("^"_mnemonic)
	} else {
		u io
	}
	d ##class(%Library.Device).ReDirectIO(redirect)
	
	d %Stream.Rewind()
	
	s result=""
	d {
		s dat=%Stream.Read(.len) q:len<0
		s result=result_dat
	} while(len>0)
	
	q result
]]></Implementation>
</Method>

<Method name="redirects">
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
#; Public entry points for redirection
rstr(len,time)  Quit ""
rchr(time)      Quit ""
wstr(s) Do %Stream.Write(s) Quit
wchr(a) Do %Stream.Write($char(a)) Quit
wnl Do %Stream.Write($char(13,10)) Quit
wff Do %Stream.Write($char(13,10,13,10)) Quit
wtab(n) New chars Set $piece(chars," ",n+1)="" Do %Stream.Write(chars) Quit
]]></Implementation>
</Method>
</Class>


<Class name="cas.func.Common">
<Description><![CDATA[
<b> Cache Atom Studio - Commands </b> : 2017/06/17 : Akio Hashimoto.<br>
<br>]]></Description>
<IncludeCode>%sySystem,%occFile</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeChanged>65231,48310.399983</TimeChanged>
<TimeCreated>64451,6886.500997</TimeCreated>

<Method name="createDirectory">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%Status</FormalSpec>
<Implementation><![CDATA[
	i ('##class(%File).DirectoryExists(path)) {
		d ##class(%File).CreateDirectoryChain(path)
	}
	q
]]></Implementation>
</Method>

<Method name="import">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns:%String,files:%String,sub:%Boolean=0,compile:%String="",&targetList:%String="",*log:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i ('$lv(files)) {
			s files=$lb(files)
		}
		
		f p=1:1:$ll(files) {
			s file=$li(files, p)
			i (##class(%File).DirectoryExists(file)) {
				s wlist=""
				s rs=##class(%ResultSet).%New("%File:FileSet")
				s r=rs.Execute(file, "*", "", 1)
				while(rs.Next()) {
					s name=rs.Data("Name")
					s type=rs.Data("Type")
					s item=rs.Data("ItemName")
					continue:$e(item, 1, 1)="."
					i (type="D") {
						i (sub) {
							s r=..import(ns, name, sub, "", .targetList)
						}
					} else {
						s wlist=wlist_$lb(name)
					}
				}
				i (wlist'="") {
					s r=..import(ns, wlist, sub, "", .targetList)
				}
			} elseif (##class(%File).Exists(file)) {
				s ex=$zcvt($p(file, ".", *), "l")
				i (ex="cls") {
					s text="", item=""
					s ff=##class(%Stream.FileCharacter).%New()
					s r=ff.LinkToFile(file)
					s ff.TranslateTable="UTF8"
					
					while('ff.AtEnd) {
						s text=text_ff.Read()
					}
					
					f c=1:1:$l(text, ff.LineTerminator) {
						s dat=$p(text, ff.LineTerminator, c)
						i ($e(dat, 1, $l("Class "))="Class ") {
							s item=$p(dat, " ", 2)
						}
					}
					i (item'="") {
						s r=..updateClass(ns, item, text, 1)
					}
					s targetList(item)=""
				} elseif ((ex="inc")!(ex="mac")!(ex="int")) {
					s text=""
					s ff=##class(%Stream.FileCharacter).%New()
					s r=ff.LinkToFile(file)
					s ff.TranslateTable="UTF8"
					s item=##class(%File).GetFilename(file)
					
					while('ff.AtEnd) {
						s text=text_ff.Read()
					}
					
					s r=..updateRoutine(ns, item, text, 1)
					
					s targetList(item)=""
				}
			}
		}
		
		i (compile'="") {
			// ex. compile="cuk"
			
			i ($d(targetList)) {
				s pjName="cosAtomProject"
				s pj=##class(%Studio.Project).%New()
				s pj.Name=pjName
				
				s name="", p=1
				f {
					s name=$o(targetList(name)) q:name=""
					s r=pj.AddItem(name), p=p+1
				}
				s c=pj.%Save(),c=pj.%Close() k pj
				
				i (p>0) {
					s sts=1
					s clog=##class(%Zcas.Redirect).run("%SYSTEM.OBJ", "CompileProject", .sts, pjName, compile, .err)
					//$$$THROWONERROR(r, sts)
					
					s clog=$tr($zstrip(clog, "<>w", $c(13,10)), $c(13), "")
					f p=1:1:$l(clog, $c(10)) {
						s log($i(log))=$p(clog, $c(10), p)
					}
				}
				$$$THROWONERROR(r, $System.OBJ.DeleteProject(pjName))
			}
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="updateClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,className:%String,text:%String,notcvt:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		//-- 改行コードを変更
		i ('$f(text, $c(13))) {
			s text=$REPLACE(text,$c(10),$c(13,10))
		}
		//-- BOM有りを無しに変更
		i ($zhex($a($e(text,1)))="EF")&($zhex($a($e(text,2)))="BB")&($zhex($a($e(text,3)))="BF") {
			s text=$e(text,4,*)
		}
		
		i ($e($zcvt(className, "l"), *-3, *)=".cls") {
			s className=$e(className, 1, *-4)
		}
		
		s st=##class(%Dictionary.ClassDefinition).%ExistsId(className)
		i ('st) {
			s nc = ##class(%Dictionary.ClassDefinition).%New(className)
			s nc.Super = ""
			s nc.Abstract = ""
			s st=nc.%Save()
		}
		
		s stream=##class(%Stream.GlobalCharacter).%New()
		d stream.Write($s(notcvt:text, 1:$zcvt(text,"I","UTF8")))
		$$$THROWONERROR(r, ##class(%Compiler.UDL.TextServices).SetTextFromStream(ns, className, stream))
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="updateRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,routineName:%String,text:%String,notcvt:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		//-- 改行コードを変更
		i ('$f(text, $c(13))) {
			s text=$REPLACE(text,$c(10),$c(13,10))
		}
		//-- BOM有りを無しに変更
		i ($zhex($a($e(text,1)))="EF")&($zhex($a($e(text,2)))="BB")&($zhex($a($e(text,3)))="BF") {
			s text=$e(text,4,*)
		}
		
		s st=##class(%Routine).Exists(routineName)
		i ('st) {
			s routine=##class(%Routine).%New(routineName)
		} else {
			s routine=##class(%Routine).%OpenId(routineName)
		}
		
		s stream=##class(%Stream.GlobalCharacter).%New()
		d stream.Write($s(notcvt:text, 1:$zcvt(text,"I","UTF8")))
		$$$THROWONERROR(r, routine.CopyFromAndSave(stream))
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="compileClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,className:%String,*log:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i ($e($zcvt(className, "l"), *-3, *)=".cls") {
			s className=$e(className, 1, *-4)
		}
		
		q:'##class(%Dictionary.ClassDefinition).%ExistsId(className)
		
		s sts=1
		s clog=##class(%Zcas.Redirect).run("%SYSTEM.OBJ", "Compile", .sts, className, "cuk /checkuptodate=expandedonly", .err)
		//$$$THROWONERROR(r, sts)
		
		s clog=$tr($zstrip(clog, "<>w", $c(13,10)), $c(13), "")
		f p=1:1:$l(clog, $c(10)) {
			s log($i(log))=$p(clog, $c(10), p)
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="compileRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,routineName:%String,*log:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		q:'##class(%Routine).Exists(routineName)
		
		s routine=##class(%RoutineMgr).%OpenId(routineName)
		i ($e($zcvt(routineName, "l"), *-3, *)'=".inc") {
			s sts=1
			s clog=##class(%Zcas.Redirect).runObj(routine, "Compile", .sts, "cuk")
			//$$$THROWONERROR(r, sts)
			
			s clog=$tr($zstrip(clog, "<>w", $c(13,10)), $c(13), "")
			f p=1:1:$l(clog, $c(10)) {
				s log($i(log))=$p(clog, $c(10), p)
			}
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="compileAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,*log:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		k targetList
		
		s rs=##class(%ResultSet).%New("%ClassDefinition:ClassInfo")
		$$$THROWONERROR(r, rs.Execute("", 0))
		
		d {
			s a=rs.Next(.ec)
			$$$THROWONERROR(ec, ec)
			i (a) {
				continue:rs.Get("System")=4
				
				s clsName=rs.Get("Name")
				i ($e(clsName, 1, 1)="%") {
					continue:$e(clsName, 1, 2)'="%Z"
				}
				s targetList(clsName_".cls")=""
			}
		} while(a)
		
		s dest=##class(%SYS.Namespace).GetRoutineDest()
		
		s rs=##class(%ResultSet).%New("%Library.Routine:RoutineList")
		$$$THROWONERROR(r, rs.Execute("", 1, 0, ns))
		
		d {
			s a=rs.Next(.ec)
			$$$THROWONERROR(ec, ec)
			i (a) {
				s rtnName=rs.Get("Name")
				i ($e(rtnName, 1, 1)="%") {
					continue:$e(rtnName, 1, 2)'="%Z"
				}
				continue:$match(rtnName, "(?i).*\.\d+\.INT$")
				continue:$match(rtnName, "(?i).*\.[A-Z]?\d+\.MAC$")
				
				s wdest=##class(%SYS.Namespace).GetRoutineDest(, rtnName)
				continue:dest'=wdest
				
				s targetList(rtnName)=""
			}
		} while(a)
		
		s pjName="cosAtomProject"
		s pj=##class(%Studio.Project).%New()
		s pj.Name=pjName
		
		s name="", p=1
		f {
			s name=$o(targetList(name)) q:name=""
			s r=pj.AddItem(name), p=p+1
		}
		s c=pj.%Save(),c=pj.%Close() k pj
		
		i (p>0) {
			s sts=1
			s wlog=##class(%Zcas.Redirect).run("%SYSTEM.OBJ", "CompileProject", .sts, pjName, "cuk /checkuptodate=expandedonly", .err)
			//$$$THROWONERROR(r, sts)
			s wlog=$tr($zstrip(wlog, "<>w", $c(13,10)), $c(13), "")
			f p=1:1:$l(wlog, $c(10)) {
				s log($i(log))=$p(wlog, $c(10), p)
			}
		}
		
		$$$THROWONERROR(r, $System.OBJ.DeleteProject(pjName))
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="deleteClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,className:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i ($e($zcvt(className, "l"), *-3, *)=".cls") {
			s className=$e(className, 1, *-4)
		}
		
		q:'##class(%Dictionary.ClassDefinition).%ExistsId(className)
		
		$$$THROWONERROR(r, $System.OBJ.Delete(className, "e-d", .err))
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="deleteRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String,routineName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		q:'##class(%Routine).Exists(routineName)
		
		$$$THROWONERROR(r, ##class(%Routine).Delete(routineName, 0, 0, ns))
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="exportClass">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns:%String,className,&files:%DynamicArray="",path:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i ($e($zcvt(className, "l"), *-3, *)=".cls") {
			s className=$e(className, 1, *-4)
		}
		
		i ($IsObject(files)) {
			s wpath="/Class/"
			s list=$lfs(className, ".")
			f i=1:1:$ll(list)-1 {
				s wpath=wpath_$li(list, i)_"/"
			}
			
			s r=##class(%Compiler.UDL.TextServices).GetTextAsStream(ns, className, .tStream)
			s wfile=wpath_$li(list, *)_".cls"
			s text=tStream.Read(tStream.Size)
			s obj={
				"filename":(wfile),
				"text":(text)
			}
			d files.%Push(obj)
		} else {
			s path=$tr(path, "\", "/")
			s path=$s($e(path, *)="/":$e(path, 1, *-1), 1:path)
			
			s wpath=path_"/Class/"
			s list=$lfs(className, ".")
			f i=1:1:$ll(list)-1 {
				s wpath=wpath_$li(list, i)_"/"
			}
			d ..createDirectory(wpath)
			
			s r=##class(%Compiler.UDL.TextServices).GetTextAsStream(ns, className, .tStream)
			s file=##class(%Stream.FileBinary).%New()
			s wfile=wpath_$li(list, *)_".cls"
			s file.Filename=wfile
			s r=file.Write($zcvt(tStream.Read(tStream.Size), "O", "UTF8"))
			s r=file.%Save()
			k file
			i ($$$ISWINDOWS) {
			} else {
				d $zf(-1, "chmod 777 "_wfile)
			}
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="exportRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns:%String,routineName,&files:%DynamicArray="",path:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i ($IsObject(files)) {
			s wpath="/Routine/"
			
			s rtn=##class(%Routine).%OpenId(routineName)
			i ('rtn.Generated) {
				s list=$lfs(routineName, ".")
				s wfile=wpath_$lts($li(list,1,*-1),".")_"."_$zcvt($li(list, *), "l")
				s text=rtn.Read(rtn.Size)
				
				s obj={
					"filename":(wfile),
					"text":(text)
				}
				d files.%Push(obj)
			}
		} else {
			s path=$tr(path, "\", "/")
			s path=$s($e(path, *)="/":$e(path, 1, *-1), 1:path)
			
			s wpath=path_"/Routine/"
			d ..createDirectory(wpath)
			
			s rtn=##class(%Routine).%OpenId(routineName)
			i ('rtn.Generated) {
				s list=$lfs(routineName, ".")
				
				s file=##class(%Stream.FileBinary).%New()
				s wfile=wpath_$lts($li(list,1,*-1),".")_"."_$zcvt($li(list, *), "l")
				s file.Filename=wfile
				//s r=file.CopyFrom(rtn)
				s r=file.Write($zcvt(rtn.Read(rtn.Size), "O", "UTF8"))
				s r=file.%Save()
				k file
				i ($$$ISWINDOWS) {
				} else {
					d $zf(-1, "chmod 777 "_wfile)
				}
			}
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="exportClassFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns:%String,&files:%DynamicArray="",path:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		i (path'="") {
			s path=$tr(path, "\", "/")
			s path=$s($e(path, *)="/":$e(path, 1, *-1), 1:path)
		}
		
		s rs=##class(%ResultSet).%New("%ClassDefinition:ClassInfo")
		$$$THROWONERROR(r, rs.Execute("", 0))
		
		d {
			s a=rs.Next(.ec)
			$$$THROWONERROR(ec, ec)
			i (a) {
				continue:rs.Get("System")'=0
				
				s clsName=rs.Get("Name")
				i ($e(clsName, 1, 1)="%") {
					continue:$e(clsName, 1, 2)'="%Z"
					continue:$l($p(clsName, ".", 1))>2
				}
				
				i ($IsObject(files)) {
					s wpath="/Class/"
					s list=$lfs(clsName, ".")
					f i=1:1:$ll(list)-1 {
						s wpath=wpath_$li(list, i)_"/"
					}
					
					s r=##class(%Compiler.UDL.TextServices).GetTextAsStream(ns, clsName, .tStream)
					s wfile=wpath_$li(list, *)_".cls"
					s text=tStream.Read(tStream.Size)
					s obj={
						"filename":(wfile),
						"text":(text)
					}
					d files.%Push(obj)
				} else {
					s wpath=path_"/Class/"
					s list=$lfs(clsName, ".")
					f i=1:1:$ll(list)-1 {
						s wpath=wpath_$li(list, i)_"/"
					}
					d ..createDirectory(wpath)
					
					s r=##class(%Compiler.UDL.TextServices).GetTextAsStream(ns, clsName, .tStream)
					s file=##class(%Stream.FileBinary).%New()
					s wfile=wpath_$li(list, *)_".cls"
					s file.Filename=wfile
					s r=file.Write($zcvt(tStream.Read(tStream.Size), "O", "UTF8"))
					s r=file.%Save()
					k file
					i ($$$ISWINDOWS) {
					} else {
						d $zf(-1, "chmod 777 "_wfile)
					}
				}
			}
		} while(a)
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="exportRoutineFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ns:%String,&files:%DynamicArray="",path:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		s dest=##class(%SYS.Namespace).GetRoutineDest()
		
		i (path'="") {
			s path=$tr(path, "\", "/")
			s path=$s($e(path, *)="/":$e(path, 1, *-1), 1:path)
			
			d ..createDirectory(wpath)
		}
		
		s rs=##class(%ResultSet).%New("%Library.Routine:RoutineList")
		$$$THROWONERROR(r, rs.Execute("", 1, 0, ns))
		
		s routines=""
		d {
			s a=rs.Next(.ec)
			$$$THROWONERROR(ec, ec)
			i (a) {
				s rtnName=rs.Get("Name")
				i ($e(rtnName, 1, 1)="%") {
					continue:$e(rtnName, 1, 2)'="%Z"
				}
				continue:$match(rtnName, "(?i).*\.\d+\.INT$")
				continue:$match(rtnName, "(?i).*\.[A-Z]?\d+\.MAC$")
				
				s wdest=##class(%SYS.Namespace).GetRoutineDest(, rtnName)
				continue:dest'=wdest
				
				s rtn=##class(%Routine).%OpenId(rtnName)
				i ('rtn.Generated) {
					s list=$lfs(rtnName, ".")
					
					i ($IsObject(files)) {
						s wpath="/Routine/"
						s wfile=wpath_$lts($li(list,1,*-1),".")_"."_$zcvt($li(list, *), "l")
						s text=rtn.Read(rtn.Size)
						
						s obj={
							"filename":(wfile),
							"text":(text)
						}
						d files.%Push(obj)
					} else {
						s wpath=path_"/Routine/"
						s file=##class(%Stream.FileBinary).%New()
						s wfile=wpath_$lts($li(list,1,*-1),".")_"."_$zcvt($li(list, *), "l")
						s file.Filename=wfile
						//s r=file.CopyFrom(rtn)
						s r=file.Write($zcvt(rtn.Read(rtn.Size), "O", "UTF8"))
						s r=file.%Save()
						k file
						i ($$$ISWINDOWS) {
						} else {
							d $zf(-1, "chmod 777 "_wfile)
						}
					}
				}
			}
		} while(a)
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="command">
<ClassMethod>1</ClassMethod>
<FormalSpec>ns:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		new $namespace
		s $namespace=ns
		
		s cmd="s r=$System.OBJ.Compile(""User.NewClass1"", ""cuk"", .err)"
		s device="|TRM|",od=$io
		o device:(cmd:"QR"):100 i '$t ztrap
		u device
		
		s eof=$zu(68,40,1),flg=0
		f j=1:1 {
			q:flg
			
			r line:10 i '$t s flg=1 s line="ERR::Read Timeout."
			s flg=$zeof
			
			u od
			s lines($i(lines))=line
			u device
		}
		s eof=$zu(68,40,eof)
		c device
		u od
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>
</Class>


<Class name="cas.service.webapi.Broker">
<Description><![CDATA[
<b> Cache Atom Studio - WebApi </b> : 2017/06/17 : Akio Hashimoto.<br>
<br>]]></Description>
<Super>%CSP.REST</Super>
<TimeChanged>64733,41420.791173</TimeChanged>
<TimeCreated>64443,65296.487902</TimeCreated>

<Parameter name="CHARSET">
<Default>UTF-8</Default>
</Parameter>

<Parameter name="CONVERTINPUTSTREAM">
<Default>1</Default>
</Parameter>

<Parameter name="UseSession">
<Default>1</Default>
</Parameter>

<Parameter name="GZIPOUTPUT">
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<Route Url="/start/" Method="POST" Call="start" />
<Route Url="/end/" Method="POST" Call="end" />
<Route Url="/update/" Method="POST" Call="update" />
<Route Url="/update-all/" Method="POST" Call="updateAll" />
<Route Url="/delete/" Method="POST" Call="delete" />
<Route Url="/export/" Method="POST" Call="export" />
<Route Url="/export-all/" Method="POST" Call="exportAll" />
</Routes>
]]></Data>
</XData>

<Method name="start">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s json={
		"CSPSessionCookie":(%session.CSPSessionCookie)
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w json.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>

<Method name="end">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s %session.EndSession=1
	q $$$OK
]]></Implementation>
</Method>

<Method name="update">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result={}
	s obj=##class(%Library.DynamicObject).%FromJSON(%request.Content) 
	s xjson=$zconvert(obj.%ToJSON(), "o", "UTF8"), json=##class(%Library.DynamicObject).%FromJSON(xjson) k obj
	try {
		s clog=[]
		s files=[]
		
		$$$THROWONERROR(r, ..updateEx(json, files, .log, 1))
		
		s p=""
		f {
			s p=$o(log(p), 1, dat) q:p=""
			d clog.%Push(dat)
		}
		
		s result={
			"status":"1",
			"message":"Saving of source is complete.",
			"files":(files),
			"log":(clog)
		}
	} catch e {
		s result={
			"status":"0",
			"message":(e.DisplayString())
		}
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w result.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>

<Method name="updateEx">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[json:%DynamicObject,files:%DynamicArray="",&log:%String,compileFlag:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result=$$$OK
	try {
		i ($e($zcvt(json.sourceName, "l"), *-3, *)=".cls") {
			$$$THROWONERROR(r, ##class(cas.func.Common).updateClass(json.namespace, json.sourceName, json.source))
			i (compileFlag) {
				$$$THROWONERROR(r, ##class(cas.func.Common).compileClass(json.namespace, json.sourceName, .log))
				$$$THROWONERROR(r, ##class(cas.func.Common).exportClass(json.namespace, json.sourceName, files))
			}
		} else {
			$$$THROWONERROR(r, ##class(cas.func.Common).updateRoutine(json.namespace, json.sourceName, json.source))
			i (compileFlag) {
				$$$THROWONERROR(r, ##class(cas.func.Common).compileRoutine(json.namespace, json.sourceName, .log))
				$$$THROWONERROR(r, ##class(cas.func.Common).exportRoutine(json.namespace, json.sourceName, files))
			}
		}
	} catch e {
		s result=e.AsStatus()
	}
	q result
]]></Implementation>
</Method>

<Method name="updateAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result={}
	s obj=##class(%Library.DynamicObject).%FromJSON(%request.Content) 
	s xjson=$zconvert(obj.%ToJSON(), "o", "UTF8"), json=##class(%Library.DynamicObject).%FromJSON(xjson) k obj
	try {
		s itrFile = json.items.%GetIterator()
		while itrFile.%GetNext(.key , .item) {
			s item.namespace=json.namespace
			$$$THROWONERROR(r, ..updateEx(item))
		}
		
		$$$THROWONERROR(r, ##class(cas.func.Common).compileAll(json.namespace, .log))
		
		s files=[]
		$$$THROWONERROR(r, ##class(cas.func.Common).exportClassFiles(json.namespace, files))
		$$$THROWONERROR(r, ##class(cas.func.Common).exportRoutineFiles(json.namespace, files))
		
		s clog=[]
		s p=""
		f {
			s p=$o(log(p), 1, dat) q:p=""
			d clog.%Push(dat)
		}
		s files=[]
		s result={
			"status":"1",
			"message":"Saving of source is complete.",
			"files":(files),
			"log":(clog)
		}
	} catch e {
		s result={
			"status":"0",
			"message":(e.DisplayString())
		}
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w result.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result={}
	s obj=##class(%Library.DynamicObject).%FromJSON(%request.Content) 
	s xjson=$zconvert(obj.%ToJSON(), "o", "UTF8"), json=##class(%Library.DynamicObject).%FromJSON(xjson) k obj
	try {
		s classes = json.list.%GetIterator()
		while classes.%GetNext(.key , .sourceName ) {
			i ($e($zcvt(sourceName, "l"), *-3, *)=".cls") {
				$$$THROWONERROR(r, ##class(cas.func.Common).deleteClass(json.namespace, sourceName))
			} else {
				$$$THROWONERROR(r, ##class(cas.func.Common).deleteRoutine(json.namespace, sourceName))
			}
		}
		
		s result={
			"status":"1",
			"message":"Source has been deleted."
		}
		
		s %response.ContentType=..#CONTENTTYPEJSON
		w result.%ToJSON()
	} catch e {
		s result={
			"status":"0",
			"message":(e.DisplayString())
		}
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w result.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>

<Method name="export">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result={}
	s obj=##class(%Library.DynamicObject).%FromJSON(%request.Content) 
	s xjson=$zconvert(obj.%ToJSON(), "o", "UTF8"), json=##class(%Library.DynamicObject).%FromJSON(xjson) k obj
	try {
		s files=[]
		i ($e($zcvt(json.sourceName, "l"), *-3, *)=".cls") {
			$$$THROWONERROR(r, ##class(cas.func.Common).exportClass(json.namespace, json.sourceName, files))
		} else {
			$$$THROWONERROR(r, ##class(cas.func.Common).exportRoutine(json.namespace, json.sourceName, files))
		}
		
		s result={
			"status":"1",
			"message":"Export completed.",
			"files":(files)
		}
	} catch e {
		s result={
			"status":"0",
			"message":(e.DisplayString())
		}
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w result.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>

<Method name="exportAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s result={}
	s obj=##class(%Library.DynamicObject).%FromJSON(%request.Content) 
	s xjson=$zconvert(obj.%ToJSON(), "o", "UTF8"), json=##class(%Library.DynamicObject).%FromJSON(xjson) k obj
	try {
		s files=[]
		$$$THROWONERROR(r, ##class(cas.func.Common).exportClassFiles(json.namespace, files))
		$$$THROWONERROR(r, ##class(cas.func.Common).exportRoutineFiles(json.namespace, files))
		
		s result={
			"status":"1",
			"message":"Export completed.",
			"files":(files)
		}
	} catch e {
		s result={
			"status":"0",
			"message":(e.DisplayString())
		}
	}
	s %response.ContentType=..#CONTENTTYPEJSON
	w result.%ToJSON()
	q $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
